#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <climits>


using namespace std;

bool f (int x, int y){
    return x>y;
}

void vectorDemo()
{
    vector<int> A={1,2,14,0,15};
    sort(A.begin(), A.end());
    A.push_back(100);
    A.push_back(100);
    A.push_back(100);
    A.push_back(100);
    A.push_back(100);
    A.push_back(123);
    bool present = binary_search(A.begin(), A.end(), 144);
    
    auto lower = lower_bound(A.begin(),A.end(),100);
    auto upper = upper_bound(A.begin(),A.end(),100);
    cout<<upper-lower<<endl;
    for(int x:A)
        cout<<x<<" ";
    cout<<endl;
    cout<<present<<endl;
    
    sort(A.begin(),A.end(),f);
     for(int x:A)
        cout<<x<<" ";   
}

void setDemo(){
    set<int> S;
    S.insert(1); // log(n)
    S.insert(2);
    S.insert(-1);
    S.insert(100);
    S.insert(100);

    for(int x:S)
        cout<<x<<" ";
    cout<<endl;
    
    //-1, 1, 2,100
    auto it = S.find(1); // log(n)
    if(it == S.end())
        cout<<"Not present"<<endl;
    else
        cout<<"Present"<<endl;
        
    
    auto it2 = S.upper_bound(-1);
    auto it3 = S.upper_bound(0);
    cout<<*it2<<" "<<*it3<<endl;
    
    S.erase(-1); //log(N)
    for(int x:S)
        cout<<x<<" ";    
}

void mapDemo(){
    map<int, int> A;
    A[1] = 100;// log(N)
    A[5] = 200;
    A[100005] = 10;
    
    map<char, int> cnt;
    string x= "shubham singh";
    for(char c:x){
        cnt[c]++;
    }
    
    cout<<cnt['s']<<" "<<cnt['z']; // log(N);
}

void powerOfStl(){
    /*
    [x,y]
        add[10,20]
        add[30,400]
        add[401,450]
        
        give me interval of 35 (Ans: [30,400])
    */
    set<pair<int, int>> S;
    S.insert({10,20});
    S.insert({30,400});
    S.insert({401,450});
    S.insert({460,500});
    S.insert({2,3});
    /*
    Pair {a,b} is smaller than {c,d} iff (a<b) or (a==b and c<d)
    */
    
    // Set now: 
    //{2,3}, {10,20}, {30,400}, {401, 450}, {460,500}
    
    int point = 460;
    auto it = S.upper_bound({point, INT_MAX});
    if(it == S.begin()){
        cout<<"Given point is not available";
        return;
    }
    it--;
    pair<int, int> current = *it;
    if(current.first <= point && point <= current.second){
        cout<<"yes present: "<<current.first<<","<<current.second;
    }else{
        cout<<"Given point is not available";
    }
}
int main()
{
    powerOfStl();
    return 0;
}
