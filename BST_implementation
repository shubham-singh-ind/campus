#include <iostream>
using namespace std;
struct BstNode{
    int data;
    BstNode *left,*right;
    BstNode(int data){
        this->data = data;
        left = right = NULL;
    }
};
BstNode* insert(BstNode *root, int data){
    if(root == NULL)
        root = new BstNode(data);
    else if(data <= root->data){
        root->left = insert(root->left, data);
    }else{
        root->right = insert(root->right, data);
    }
    return root;
}
bool search(BstNode *root, int data){
    if(root == NULL)
        return false;
    if(root->data == data)
        return true;
    else if(data <= root->data)
        return search(root->left, data);
    else
        return search(root->right, data);
}
int min(BstNode *root){
    if(root == NULL)
        return -1;
    if(root->left == NULL)
        return root->data;
    min(root->left);
}
int max(BstNode *root){
    if(root == NULL)
        return -1;
    if(root->right == NULL)
        return root->data;
    max(root->right);
}
int heightOfTree(BstNode *root){
    // height of a tree = max(height of left subtree, height of right subtree) + 1;
    if(root == NULL)
        return -1;
    return max(heightOfTree(root->left), heightOfTree(root->right)) + 1;
}
int main() {
	// your code goes here
	BstNode *root = NULL;
	root = insert(root, 10);
	root = insert(root, 15);
	root = insert(root, 6);
	root = insert(root, 14);
	root = insert(root, 5);
	root = insert(root, 15);	
	int num;
	cin>>num;
	if(search(root, num))
	    cout<<"Found";
	else
	    cout<<"Not found";
    cout<<endl;
    cout<<"MIN: "<<min(root)<<endl;
    cout<<"MAX: "<<max(root)<<endl;
    cout<<"Height of tree: "<<heightOfTree(root)<<endl;
	return 0;
}
